syntax = "proto3";

package greptime.v1;

option java_package = "io.greptime.v1";
option java_outer_classname = "Database";
option go_package = "github.com/GreptimeTeam/greptime-proto/go/greptime/v1";

import "greptime/v1/ddl.proto";
import "greptime/v1/column.proto";
import "greptime/v1/prom.proto";
import "greptime/v1/common.proto";

service GreptimeDatabase {
  rpc Handle(GreptimeRequest) returns (GreptimeResponse);

  rpc HandleRequests(stream GreptimeRequest) returns (GreptimeResponse);
}

message GreptimeRequest {
  RequestHeader header = 1;
  oneof request {
    InsertRequests inserts = 2;
    QueryRequest query = 3;
    DdlRequest ddl = 4;
    DeleteRequest delete = 5;
  }
}

message GreptimeResponse {
  ResponseHeader header = 1;
  oneof response { AffectedRows affected_rows = 2; }
}

message QueryRequest {
  oneof query {
    string sql = 1;
    bytes logical_plan = 2;
    PromRangeQuery prom_range_query = 3;
  }
}

message InsertRequests {
  repeated InsertRequest inserts = 1;
}

message InsertRequest {
  string table_name = 1;

  // Data is represented here.
  repeated Column columns = 3;

  // The row_count of all columns, which include null and non-null values.
  //
  // Note: the row_count of all columns in a InsertRequest must be same.
  uint32 row_count = 4;

  // The region number of current insert request.
  uint32 region_number = 5;
}

message DeleteRequest {
  // The table name to delete from. Catalog name and schema name are in the
  // `RequestHeader`.
  string table_name = 1;

  // The region number of current delete request.
  uint32 region_number = 2;

  // The data to delete, indexed by key columns.
  repeated Column key_columns = 3;

  // The row count of all columns above.
  uint32 row_count = 4;
}
message RequestHeader {
  // The `catalog` that is selected to be used in this request.
  string catalog = 1;
  // The `schema` that is selected to be used in this request.
  string schema = 2;
  // The `authorization` header, much like http's authorization header.
  AuthHeader authorization = 3;
  // The `dbname` for the request
  string dbname = 4;
  // TraceID of request
  optional uint64 trace_id = 5;
  // SpanID of request
  optional uint64 span_id = 6;
}

message ResponseHeader {
  Status status = 1;
}

message Status {
  // Corresponding to the `StatusCode` definition of GreptimeDB
  uint32 status_code = 1;
  string err_msg = 2;
}

message AuthHeader {
  oneof auth_scheme {
    Basic basic = 1;
    Token token = 2;
  }
}

message Basic {
  string username = 1;
  string password = 2;
}

message Token { string token = 1; }

message AffectedRows { uint32 value = 1; }

message FlightMetadata { AffectedRows affected_rows = 1; }

enum SemanticType {
  TAG = 0;
  FIELD = 1;
  TIMESTAMP = 2;
}

message ColumnDef {
  string name = 1;
  ColumnDataType datatype = 2;
  bool is_nullable = 3;
  bytes default_constraint = 4;
}

enum ColumnDataType {
  BOOLEAN = 0;
  INT8 = 1;
  INT16 = 2;
  INT32 = 3;
  INT64 = 4;
  UINT8 = 5;
  UINT16 = 6;
  UINT32 = 7;
  UINT64 = 8;
  FLOAT32 = 9;
  FLOAT64 = 10;
  BINARY = 11;
  STRING = 12;
  DATE = 13;
  DATETIME = 14;
  TIMESTAMP_SECOND = 15;
  TIMESTAMP_MILLISECOND = 16;
  TIMESTAMP_MICROSECOND = 17;
  TIMESTAMP_NANOSECOND = 18;
  TIME_SECOND = 19;
  TIME_MILLISECOND = 20;
  TIME_MICROSECOND = 21;
  TIME_NANOSECOND = 22;
}

message DdlRequest {
  oneof expr {
    CreateDatabaseExpr create_database = 1;
    CreateTableExpr create_table = 2;
    AlterExpr alter = 3;
    DropTableExpr drop_table = 4;
    FlushTableExpr flush_table = 5;
    CompactTableExpr compact_table = 6;
    TruncateTableExpr truncate_table = 7;
  }
}

message CreateTableExpr {
  string catalog_name = 1;
  string schema_name = 2;
  string table_name = 3;
  string desc = 4;
  repeated ColumnDef column_defs = 5;
  string time_index = 6;
  repeated string primary_keys = 7;
  bool create_if_not_exists = 8;
  map<string, string> table_options = 9;
  TableId table_id = 10;
  repeated uint32 region_numbers = 11;
  string engine = 12;
}

message AlterExpr {
  string catalog_name = 1;
  string schema_name = 2;
  string table_name = 3;
  oneof kind {
    AddColumns add_columns = 4;
    DropColumns drop_columns = 5;
    RenameTable rename_table = 6;
  }
  TableId table_id = 7;
  // table version before altering.
  uint64 table_version = 8;
}

message DropTableExpr {
  string catalog_name = 1;
  string schema_name = 2;
  string table_name = 3;
  TableId table_id = 4;
}

message FlushTableExpr {
  string catalog_name = 1;
  string schema_name = 2;
  string table_name = 3;
  optional uint32 region_number = 4;
  TableId table_id = 5;
}

message CompactTableExpr {
  string catalog_name = 1;
  string schema_name = 2;
  string table_name = 3;
  optional uint32 region_number = 4;
}

message CreateDatabaseExpr {
  string database_name = 1;
  bool create_if_not_exists = 2;
}

message TruncateTableExpr {
  string catalog_name = 1;
  string schema_name = 2;
  string table_name = 3;
  TableId table_id = 4;
}

message AddColumns { repeated AddColumn add_columns = 1; }

message DropColumns { repeated DropColumn drop_columns = 1; }

message RenameTable { string new_table_name = 1; }

message AddColumn {
  ColumnDef column_def = 1;
  bool is_key = 2;

  message Location {
    enum LocationType {
      FIRST = 0;
      AFTER = 1;
    }
    LocationType location_type = 1;
    string after_cloumn_name = 2;
  }
  Location location = 3;
}

message DropColumn { string name = 1; }

message TableId { uint32 id = 1; }

message PromRangeQuery {
  string query = 1;
  string start = 2;
  string end = 3;
  string step = 4;
}
message Column {
  string column_name = 1;
  SemanticType semantic_type = 2;

  message Values {
    repeated int32 i8_values = 1;
    repeated int32 i16_values = 2;
    repeated int32 i32_values = 3;
    repeated int64 i64_values = 4;

    repeated uint32 u8_values = 5;
    repeated uint32 u16_values = 6;
    repeated uint32 u32_values = 7;
    repeated uint64 u64_values = 8;

    repeated float f32_values = 9;
    repeated double f64_values = 10;

    repeated bool bool_values = 11;
    repeated bytes binary_values = 12;
    repeated string string_values = 13;

    repeated int32 date_values = 14;
    repeated int64 datetime_values = 15;
    repeated int64 ts_second_values = 16;
    repeated int64 ts_millisecond_values = 17;
    repeated int64 ts_microsecond_values = 18;
    repeated int64 ts_nanosecond_values = 19;
    repeated int64 time_second_values = 20;
    repeated int64 time_millisecond_values = 21;
    repeated int64 time_microsecond_values = 22;
    repeated int64 time_nanosecond_values = 23;
  }
  // The array of non-null values in this column.
  //
  // For example: suppose there is a column "foo" that contains some int32
  // values (1, 2, 3, 4, 5, null, 7, 8, 9, null);
  //   column:
  //     column_name: foo
  //     semantic_type: Tag
  //     values: 1, 2, 3, 4, 5, 7, 8, 9
  //     null_masks: 00100000 00000010
  Values values = 3;

  // Mask maps the positions of null values.
  // If a bit in null_mask is 1, it indicates that the column value at that
  // position is null.
  bytes null_mask = 4;

  // Helpful in creating vector from column.
  ColumnDataType datatype = 5;
}