{"code":"import axios from 'axios';\r\nconst dayjs = require('dayjs');\r\nconst promQL = function (db) {\r\n    this.url = '/v1/promql';\r\n    this.args = {\r\n        query: '',\r\n        start: dayjs().subtract(5, 'm').unix(),\r\n        end: dayjs().unix(),\r\n        step: 1,\r\n        db,\r\n    };\r\n    this.query = (query) => {\r\n        this.args.query = query;\r\n        return this;\r\n    };\r\n    this.start = (ts) => {\r\n        this.args.start = dayjs(ts).unix();\r\n        return this;\r\n    };\r\n    this.end = (ts) => {\r\n        this.args.end = dayjs(ts).unix();\r\n        return this;\r\n    };\r\n    this.step = (step) => {\r\n        this.args.step = step;\r\n        return this;\r\n    };\r\n    this.duration = (duration = '5m') => {\r\n        const [time, unit] = duration.split(/(?<=\\d)(?=[a-zA-Z])/);\r\n        this.args.start = dayjs().subtract(time, unit).unix();\r\n        this.args.end = dayjs().unix();\r\n        return this;\r\n    };\r\n    this.run = async () => {\r\n        let res = await axios.post(this.url, {}, {\r\n            params: this.args,\r\n        });\r\n        if (res.data.output)\r\n            return {\r\n                schema: res.data.output[0].records.schema.column_schemas,\r\n                rows: res.data.output[0].records.rows,\r\n                promQL: this.args,\r\n            };\r\n        else\r\n            return res.data;\r\n    };\r\n};\r\nexport default promQL;\r\n","dts":{"name":"/Users/nemo/demo/greptime-js-sdk/.rpt2_cache/placeholder/promql.d.ts","writeByteOrderMark":false,"text":"declare const promQL: (db: any) => void;\r\nexport default promQL;\r\n"}}
