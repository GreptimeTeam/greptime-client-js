{"code":"import axios from 'axios';\r\nconst dayjs = require('dayjs');\r\nconst qs = require('qs');\r\nconst select = {\r\n    select: function (column = '*') {\r\n        this.sql.select = column;\r\n        return this;\r\n    },\r\n    from: function (table) {\r\n        this.sql.from = table;\r\n        return this;\r\n    },\r\n    limit: function (_limit) {\r\n        this.sql.limit = _limit;\r\n        return this;\r\n    },\r\n    where: function (condition = '') {\r\n        this.sql.where = condition;\r\n        return this;\r\n    },\r\n    groupBy: function (condition = '') {\r\n        this.sql.groupBy = condition;\r\n        return this;\r\n    },\r\n    orderBy: function (condition = '', order = 'ASC') {\r\n        this.sql.orderBy = condition ? `${condition} ${order}` : '';\r\n        return this;\r\n    },\r\n    duration: function (t = '5m') {\r\n        const [time, unit] = t.split(/(?<=\\d)(?=[a-zA-Z])/);\r\n        this.sql.where += `${this.sql.where ? 'AND' : ''} ts > ${dayjs().subtract(time, unit).valueOf()}000000::Timestamp`;\r\n        return this;\r\n    },\r\n    today: function () {\r\n        this.sql.where += `${this.sql.where ? 'AND' : ''}ts > ${dayjs().startOf('d').valueOf()}000000::Timestamp`;\r\n        return this;\r\n    },\r\n    runSQL: async function (sql) {\r\n        let res = await axios.post(this.url, qs.stringify({\r\n            sql,\r\n        }));\r\n        return await res;\r\n    },\r\n    query: async function () {\r\n        const sql = `SELECT ${this.sql.select} \n      FROM ${this.sql.from} \n      ${this.sql.where ? `WHERE ${this.sql.where}` : ''} \n      ${this.sql.groupBy ? `GROUP BY ${this.sql.groupBy}` : ''} \n      ${this.sql.orderBy ? `ORDER BY ${this.sql.orderBy}` : ''} \n      ${this.sql.limit ? `LIMIT ${this.sql.limit}` : ''}`;\r\n        let res = await this.runSQL(sql);\r\n        if (res.data.output)\r\n            return {\r\n                schema: res.data.output[0].records.schema.column_schemas,\r\n                rows: res.data.output[0].records.rows,\r\n                sql: sql.replace(/\\s+/g, ' '),\r\n            };\r\n        else\r\n            return res.data;\r\n    },\r\n    count: async function () {\r\n        const sql = `SELECT COUNT(1) \n      FROM ${this.sql.from} \n      ${this.sql.where ? `WHERE ${this.sql.where}` : ''} \n      ${this.sql.groupBy ? `GROUP BY ${this.sql.groupBy}` : ''} \n      ${this.sql.orderBy ? `ORDER BY ${this.sql.orderBy}` : ''} \n      ${this.sql.limit ? `LIMIT ${this.sql.limit}` : ''}`;\r\n        let res = await this.runSQL(sql);\r\n        return res.data.output[0].records.rows[0][0];\r\n    },\r\n};\r\nexport default select;\r\n","dts":{"name":"/Users/nemo/demo/greptime-js-sdk/.rpt2_cache/placeholder/select.d.ts","writeByteOrderMark":false,"text":"declare const select: {\r\n    select: (column?: string) => any;\r\n    from: (table: any) => any;\r\n    limit: (_limit: any) => any;\r\n    where: (condition?: string) => any;\r\n    groupBy: (condition?: string) => any;\r\n    orderBy: (condition?: string, order?: string) => any;\r\n    duration: (t?: string) => any;\r\n    today: () => any;\r\n    runSQL: (sql: any) => Promise<any>;\r\n    query: () => Promise<any>;\r\n    count: () => Promise<any>;\r\n};\r\nexport default select;\r\n"}}
