{"code":"import * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\nvar dayjs = require('dayjs');\r\nvar promQL = function (db) {\r\n    var _this = this;\r\n    this.url = '/v1/promql';\r\n    this.args = {\r\n        query: '',\r\n        start: dayjs().subtract(5, 'm').unix(),\r\n        end: dayjs().unix(),\r\n        step: 1,\r\n        db: db,\r\n    };\r\n    this.query = function (query) {\r\n        _this.args.query = query;\r\n        return _this;\r\n    };\r\n    this.start = function (ts) {\r\n        _this.args.start = dayjs(ts).unix();\r\n        return _this;\r\n    };\r\n    this.end = function (ts) {\r\n        _this.args.end = dayjs(ts).unix();\r\n        return _this;\r\n    };\r\n    this.step = function (step) {\r\n        _this.args.step = step;\r\n        return _this;\r\n    };\r\n    this.duration = function (duration) {\r\n        if (duration === void 0) { duration = '5m'; }\r\n        var _a = duration.split(/(?<=\\d)(?=[a-zA-Z])/), time = _a[0], unit = _a[1];\r\n        _this.args.start = dayjs().subtract(time, unit).unix();\r\n        _this.args.end = dayjs().unix();\r\n        return _this;\r\n    };\r\n    this.run = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n        var res;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, axios.post(this.url, {}, {\r\n                        params: this.args,\r\n                    })];\r\n                case 1:\r\n                    res = _a.sent();\r\n                    if (res.data.output)\r\n                        return [2 /*return*/, {\r\n                                schema: res.data.output[0].records.schema.column_schemas,\r\n                                rows: res.data.output[0].records.rows,\r\n                                promQL: this.args,\r\n                            }];\r\n                    else\r\n                        return [2 /*return*/, res.data];\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    }); };\r\n};\r\nexport default promQL;\r\n","dts":{"name":"/Users/nemo/demo/greptime-js-sdk/.rpt2_cache/placeholder/promql.d.ts","writeByteOrderMark":false,"text":"declare const promQL: (db: any) => void;\r\nexport default promQL;\r\n"}}
