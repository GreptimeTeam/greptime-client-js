{"code":"import * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\nvar dayjs = require('dayjs');\r\nvar qs = require('qs');\r\nvar select = function (column) {\r\n    if (column === void 0) { column = '*'; }\r\n    this.sql.select = column;\r\n    return this;\r\n};\r\nvar from = function (table) {\r\n    this.sql.from = table;\r\n    return this;\r\n};\r\nvar limit = function (_limit) {\r\n    this.sql.limit = _limit;\r\n    return this;\r\n};\r\nvar where = function (condition) {\r\n    if (condition === void 0) { condition = ''; }\r\n    this.sql.where = condition;\r\n    return this;\r\n};\r\nvar groupBy = function (condition) {\r\n    if (condition === void 0) { condition = ''; }\r\n    this.sql.groupBy = condition;\r\n    return this;\r\n};\r\nvar orderBy = function (condition, order) {\r\n    if (condition === void 0) { condition = ''; }\r\n    if (order === void 0) { order = 'ASC'; }\r\n    this.sql.orderBy = condition ? condition + \" \" + order : '';\r\n    return this;\r\n};\r\nvar duration = function (t) {\r\n    if (t === void 0) { t = '5m'; }\r\n    var _a = t.split(/(?<=\\d)(?=[a-zA-Z])/), time = _a[0], unit = _a[1];\r\n    this.sql.where += (this.sql.where ? 'AND' : '') + \" ts > \" + dayjs().subtract(time, unit).valueOf() + \"000000::Timestamp\";\r\n    return this;\r\n};\r\nvar today = function () {\r\n    this.sql.where += (this.sql.where ? 'AND' : '') + \"ts > \" + dayjs().startOf('d').valueOf() + \"000000::Timestamp\";\r\n    return this;\r\n};\r\nvar runSQL = function (sql) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var res;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, axios.post(this.url, qs.stringify({\r\n                        sql: sql,\r\n                    }))];\r\n                case 1:\r\n                    res = _a.sent();\r\n                    return [4 /*yield*/, res];\r\n                case 2: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    });\r\n};\r\nvar query = function () {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var sql, res;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    sql = \"SELECT \" + this.sql.select + \" \\n    FROM \" + this.sql.from + \" \\n    \" + (this.sql.where ? \"WHERE \" + this.sql.where : '') + \" \\n    \" + (this.sql.groupBy ? \"GROUP BY \" + this.sql.groupBy : '') + \" \\n    \" + (this.sql.orderBy ? \"ORDER BY \" + this.sql.orderBy : '') + \" \\n    \" + (this.sql.limit ? \"LIMIT \" + this.sql.limit : '');\r\n                    return [4 /*yield*/, this.runSQL(sql)];\r\n                case 1:\r\n                    res = _a.sent();\r\n                    if (res.data.output)\r\n                        return [2 /*return*/, {\r\n                                schema: res.data.output[0].records.schema.column_schemas,\r\n                                rows: res.data.output[0].records.rows,\r\n                                sql: sql.replace(/\\s+/g, ' '),\r\n                            }];\r\n                    else\r\n                        return [2 /*return*/, res.data];\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n};\r\nvar count = function () {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var sql, res;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    sql = \"SELECT COUNT(1) \\n    FROM \" + this.sql.from + \" \\n    \" + (this.sql.where ? \"WHERE \" + this.sql.where : '') + \" \\n    \" + (this.sql.groupBy ? \"GROUP BY \" + this.sql.groupBy : '') + \" \\n    \" + (this.sql.orderBy ? \"ORDER BY \" + this.sql.orderBy : '') + \" \\n    \" + (this.sql.limit ? \"LIMIT \" + this.sql.limit : '');\r\n                    return [4 /*yield*/, this.runSQL(sql)];\r\n                case 1:\r\n                    res = _a.sent();\r\n                    return [2 /*return*/, res.data.output[0].records.rows[0][0]];\r\n            }\r\n        });\r\n    });\r\n};\r\nexport default { select: select, from: from, limit: limit, where: where, groupBy: groupBy, orderBy: orderBy, duration: duration, today: today, query: query, count: count, runSQL: runSQL };\r\n","dts":{"name":"/Users/nemo/demo/greptime-js-sdk/.rpt2_cache/placeholder/select.d.ts","writeByteOrderMark":false,"text":"declare const _default: {\r\n    select: (column?: string) => any;\r\n    from: (table: any) => any;\r\n    limit: (_limit: any) => any;\r\n    where: (condition?: string) => any;\r\n    groupBy: (condition?: string) => any;\r\n    orderBy: (condition?: string, order?: string) => any;\r\n    duration: (t?: string) => any;\r\n    today: () => any;\r\n    query: () => Promise<any>;\r\n    count: () => Promise<any>;\r\n    runSQL: (sql: any) => Promise<any>;\r\n};\r\nexport default _default;\r\n"}}
