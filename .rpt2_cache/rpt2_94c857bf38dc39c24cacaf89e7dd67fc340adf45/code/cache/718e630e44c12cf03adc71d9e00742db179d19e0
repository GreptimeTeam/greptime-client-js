{"code":"import * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\nvar dayjs = require('dayjs');\r\nvar qs = require('qs');\r\nvar http = function (dbName) {\r\n    var _this = this;\r\n    this.url = \"/v1/sql?db=\" + dbName;\r\n    this.sql = {\r\n        where: '',\r\n    };\r\n    this.select = function (column) {\r\n        if (column === void 0) { column = '*'; }\r\n        _this.sql.select = column;\r\n        return _this;\r\n    };\r\n    this.from = function (table) {\r\n        _this.sql.from = table;\r\n        return _this;\r\n    };\r\n    this.limit = function (_limit) {\r\n        _this.sql.limit = _limit;\r\n        return _this;\r\n    };\r\n    this.where = function (condition) {\r\n        if (condition === void 0) { condition = ''; }\r\n        _this.sql.where = condition;\r\n        return _this;\r\n    };\r\n    this.groupBy = function (condition) {\r\n        if (condition === void 0) { condition = ''; }\r\n        _this.sql.groupBy = condition;\r\n        return _this;\r\n    };\r\n    this.orderBy = function (condition) {\r\n        if (condition === void 0) { condition = ''; }\r\n        _this.sql.orderBy = condition;\r\n        return _this;\r\n    };\r\n    this.orderDesc = function (isDesc) {\r\n        if (isDesc === void 0) { isDesc = false; }\r\n        _this.sql.orderBy = isDesc ? _this.sql.orderBy + \" DESC\" : _this.sql.orderBy;\r\n        return _this;\r\n    };\r\n    this.before = function (t) {\r\n        if (t === void 0) { t = '5m'; }\r\n        var _a = t.split(/(?<=\\d)(?=[a-zA-Z])/), time = _a[0], unit = _a[1];\r\n        _this.sql.where += (_this.sql.where ? 'AND' : '') + \" ts > \" + dayjs().subtract(time, unit).valueOf() + \"000000::Timestamp\";\r\n        return _this;\r\n    };\r\n    this.today = function () {\r\n        _this.sql.where += (_this.sql.where ? 'AND' : '') + \"ts > \" + dayjs().startOf('d').valueOf() + \"000000::Timestamp\";\r\n        return _this;\r\n    };\r\n    var runSQL = function (sql) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n        var res;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, axios.post(this.url, qs.stringify({\r\n                        sql: sql,\r\n                    }))];\r\n                case 1:\r\n                    res = _a.sent();\r\n                    return [4 /*yield*/, res];\r\n                case 2: return [2 /*return*/, _a.sent()];\r\n            }\r\n        });\r\n    }); };\r\n    this.query = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var sql, res;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        sql = \"SELECT \" + this.sql.select + \" \\n    FROM \" + this.sql.from + \" \\n    \" + (this.sql.where ? \"WHERE \" + this.sql.where : '') + \" \\n    \" + (this.sql.groupBy ? \"GROUP BY \" + this.sql.groupBy : '') + \" \\n    \" + (this.sql.orderBy ? \"ORDER BY \" + this.sql.orderBy : '') + \" \\n    \" + (this.sql.limit ? \"LIMIT \" + this.sql.limit : '');\r\n                        return [4 /*yield*/, runSQL(sql)];\r\n                    case 1:\r\n                        res = _a.sent();\r\n                        if (res.data.output)\r\n                            return [2 /*return*/, {\r\n                                    schema: res.data.output[0].records.schema.column_schemas,\r\n                                    rows: res.data.output[0].records.rows,\r\n                                    sql: sql.replace(/\\s+/g, ' '),\r\n                                }];\r\n                        else\r\n                            return [2 /*return*/, res.data];\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    this.count = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var sql, res;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        sql = \"SELECT COUNT(1) \\n    FROM \" + this.sql.from + \" \\n    \" + (this.sql.where ? \"WHERE \" + this.sql.where : '') + \" \\n    \" + (this.sql.groupBy ? \"GROUP BY \" + this.sql.groupBy : '') + \" \\n    \" + (this.sql.orderBy ? \"ORDER BY \" + this.sql.orderBy : '') + \" \\n    \" + (this.sql.limit ? \"LIMIT \" + this.sql.limit : '');\r\n                        return [4 /*yield*/, runSQL(sql)];\r\n                    case 1:\r\n                        res = _a.sent();\r\n                        return [2 /*return*/, res.data.output[0].records.rows[0][0]];\r\n                }\r\n            });\r\n        });\r\n    };\r\n};\r\nexport default http;\r\n","dts":{"name":"/Users/nemo/demo/greptime-js-sdk/.rpt2_cache/placeholder/http.d.ts","writeByteOrderMark":false,"text":"declare const http: (dbName: any) => void;\r\nexport default http;\r\n"}}
